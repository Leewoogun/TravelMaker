
pipeline {
	agent any
	stages {
		stage('Build') {
			steps {
				sh 'pwd'
				sh 'ls -al'
        		//프로젝트 권한 변경
        		sh 'chmod +x ./travelmaker_backend/gradlew'
        		//프로젝트 빌드
        		withCredentials([string(credentialsId: 'JASYPT_KEY', variable: 'JASYPT_KEY'), usernamePassword(credentialsId: 'docker-login-creds', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME'), usernamePassword(credentialsId: 'docker-hub-path', passwordVariable: 'REPOSITORY', usernameVariable: 'USERSPACE')]) {
        		    sh 'cd ./travelmaker_backend && ./gradlew clean build -PJASYPT_KEY=$JASYPT_KEY'
                    script {
                                            sh """
                                                ./gradlew jib -Pdocker.repository=${USERSPACE} \
                                                              -Pdocker.repository.username=${USERNAME} \
                                                              -Pdocker.repository.password=${PASSWORD} \
                                                              -Pdocker.image.name=${REPOSITORY} \
                                                              -Pdocker.image.tag=${currentBuild.number}
                                            """
                                        }
        		}
			}
		}
		stage('Docker Hub Publish'){
		    steps{
		        sh 'pwd'
			    withCredentials([usernamePassword(credentialsId: 'docker-login-creds', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME'), usernamePassword(credentialsId: 'docker-hub-path', passwordVariable: 'REPOSITORY', usernameVariable: 'USERSPACE')]) {
                    script {
                                            sh """
                                                ./gradlew jib -Pdocker.repository=${USERSPACE} \
                                                              -Pdocker.repository.username=${USERNAME} \
                                                              -Pdocker.repository.password=${PASSWORD} \
                                                              -Pdocker.image.name=${REPOSITORY} \
                                                              -Pdocker.image.tag=${currentBuild.number}
                                            """
                                        }
                }
		    }
		}
		stage('Deploy') {
			steps {
			    sh 'pwd'
				sshagent(credentials: ['travelmaker_ec2_server']) {
                    withCredentials([string(credentialsId: 'ec2-server-ip', variable: 'EC2_SERVER_IP')]) {
                        sh 'ssh -o StrictHostKeyChecking=no ubuntu@$EC2_SERVER_IP "sudo sh deploy.sh"'
                    }
                }
			}
		}
	}
	    post {
            success {
            	script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    mattermostSend (color: 'good',
                    message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/jpyak6ugbtygzdbaqjkhy8bmrw',
                    channel: 'D202-Jenkins'
                    )
                }
            }
            failure {
            	script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    mattermostSend (color: 'danger',
                    message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/jpyak6ugbtygzdbaqjkhy8bmrw',
                    channel: 'D202-Jenkins'
                    )
                }
            }
        }
}